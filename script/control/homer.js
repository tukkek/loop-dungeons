import*as i from"../model/unit/actor/actor.js";import*as e from"../model/point.js";import*as o from"../view/map.js";import*as r from"./engine.js";import*as n from"./rpg.js";const l=[new e.Point(1,1),new e.Point(1,-1),new e.Point(-1,-1),new e.Point(-1,1)];class t{constructor(s){this.floor=s,this.monsters=s.units.filter(t=>t instanceof i.Actor);var t=e.range(0,0,o.width,o.height);this.tiles=t.filter(t=>!s.wall(t.x,t.y)),n.shuffle(this.tiles),this.scores=new Map}block(s){var t;return!!s.validate(0,0,o.width,o.height)&&(!!this.floor.wall(s.x,s.y)||(t=this.floor.units.find(t=>t.location.equals(s)))&&this.monsters.indexOf(t)<0)}scan(){for(var s of this.tiles)if(!this.block(s)){let t=0;for(var i of s.neighbors)t+=this.block(i)?-1:1;for(var o of l)o=new e.Point(s.x+o.x,s.y+o.y),t+=this.block(o)?1:-1;this.scores.set(s,t)}}sort(){let i=this.scores;var t=Array.from(i.keys());t.sort((t,s)=>i.get(t)-i.get(s)),this.tiles=t.reverse()}clean(){let s=r.hero;this.monsters.splice(this.monsters.indexOf(s),1);var t=this.tiles.find(t=>t.equals(s.location));this.tiles.splice(this.tiles.indexOf(t),1)}house(){this.clean(),this.scan(),this.sort();var s=this.monsters;for(let t=0;t<s.length;t++)s[t].location=this.tiles[t]}}export{t as Homer};